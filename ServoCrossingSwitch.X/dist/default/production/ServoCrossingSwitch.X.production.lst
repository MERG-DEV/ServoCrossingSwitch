

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Sep 16 18:18:07 2020

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	12F519
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	bitnvBANK0,global,bit,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=ENTRY,merge=1,delta=2
     6                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	jmp_tab,global,class=ENTRY,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	dabs	1,0x8,8
    21  0000                     
    22                           ; Version 1.41
    23                           ; Generated 25/01/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC12F519 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0006                     	;# 
    64  0021                     	;# 
    65  0025                     	;# 
    66  0026                     	;# 
    67                           
    68                           	psect	bitnvBANK0
    69  0F8                     __pbitnvBANK0:	
    70  0F8                     _RelayState:	
    71  0F8                     	ds	1
    72  0000                     _OPTION	set	0
    73  0006                     _TRIS	set	6
    74  0006                     _PORTB	set	6
    75  0001                     _TMR0	set	1
    76  0031                     _RB1	set	49
    77  0032                     _RB2	set	50
    78  0030                     _RB0	set	48
    79  0033                     _RB3	set	51
    80  0025                     _EEDATA	set	37
    81  0021                     _EECONbits	set	33
    82  0026                     _EEADR	set	38
    83                           
    84                           ; #config settings
    85  0000                     
    86                           	psect	cinit
    87  002                     start_initialization:	
    88  002                     __initialization:	
    89                           
    90                           ; Clear objects allocated to BITBANK0
    91  002  07E                	clrf	(__pbitbssBANK0/(0+8))& (0+31)
    92                           
    93                           ; Clear objects allocated to BANK0
    94  003  07A                	clrf	__pbssBANK0& (0+31)
    95  004  07B                	clrf	(__pbssBANK0+1)& (0+31)
    96  005  07C                	clrf	(__pbssBANK0+2)& (0+31)
    97  006  07D                	clrf	(__pbssBANK0+3)& (0+31)
    98                           
    99                           ; Clear objects allocated to BANK1
   100  007  5A4                	bsf	4,5	;FSR5=1, select bank1
   101  008  070                	clrf	__pbssBANK1& (0+31)
   102  009  071                	clrf	(__pbssBANK1+1)& (0+31)
   103  00A  072                	clrf	(__pbssBANK1+2)& (0+31)
   104  00B  073                	clrf	(__pbssBANK1+3)& (0+31)
   105  00C  074                	clrf	(__pbssBANK1+4)& (0+31)
   106  00D  075                	clrf	(__pbssBANK1+5)& (0+31)
   107  00E  076                	clrf	(__pbssBANK1+6)& (0+31)
   108  00F                     end_of_initialization:	
   109                           ;End of C runtime variable initialization code
   110                           
   111  00F                     __end_of__initialization:	
   112  00F  064                	clrf	4
   113  010  4A3  A76           	ljmp	_main	;jump to C main() function
   114                           
   115                           	psect	bitbssBANK0
   116  0F0                     __pbitbssBANK0:	
   117  0F0                     _NoSigState:	
   118  0F0                     	ds	1
   119  0F1                     _SetupState:	
   120  0F1                     	ds	1
   121  0F2                     _ErrorState:	
   122  0F2                     	ds	1
   123                           
   124                           	psect	bssBANK0
   125  01A                     __pbssBANK0:	
   126  01A                     _PwMidpos:	
   127  01A                     	ds	1
   128  01B                     _PwDiff2:	
   129  01B                     	ds	1
   130  01C                     _PwSaved:	
   131  01C                     	ds	1
   132  01D                     _PwNow:	
   133  01D                     	ds	1
   134                           
   135                           	psect	bssBANK1
   136  030                     __pbssBANK1:	
   137  030                     _PwThreshold:	
   138  030                     	ds	2
   139  032                     procSetupMode@Debounce:	
   140  032                     	ds	1
   141  033                     setLED@LedBeat:	
   142  033                     	ds	1
   143  034                     setLED@LedCycleCount:	
   144  034                     	ds	1
   145  035                     _PortValue:	
   146  035                     	ds	1
   147  036                     _ErrorStateCount:	
   148  036                     	ds	1
   149                           
   150                           	psect	cstackBANK0
   151  010                     __pcstackBANK0:	
   152  010                     ?_readNVM:	
   153  010                     writeNVM@Addr:	
   154                           ; 1 bytes @ 0x0
   155                           
   156  010                     setLED@LedMode:	
   157                           ; 1 bytes @ 0x0
   158                           
   159                           
   160                           ; 1 bytes @ 0x0
   161  010                     	ds	1
   162  011                     ??_setRelay:	
   163  011                     ??_procSetupMode:	
   164                           ; 1 bytes @ 0x1
   165                           
   166  011                     _setLED$80:	
   167                           ; 1 bytes @ 0x1
   168                           
   169                           
   170                           ; 1 bytes @ 0x1
   171  011                     	ds	1
   172  012                     ??_initDevice:	
   173  012                     _setLED$81:	
   174                           ; 1 bytes @ 0x2
   175                           
   176                           
   177                           ; 1 bytes @ 0x2
   178  012                     	ds	1
   179  013                     _setLED$82:	
   180  013                     _setRelay$74:	
   181                           ; 1 bytes @ 0x3
   182                           
   183  013                     _initDevice$89:	
   184                           ; 2 bytes @ 0x3
   185                           
   186                           
   187                           ; 2 bytes @ 0x3
   188  013                     	ds	1
   189  014                     _setLED$83:	
   190  014                     _procSetupMode$86:	
   191                           ; 1 bytes @ 0x4
   192                           
   193                           
   194                           ; 2 bytes @ 0x4
   195  014                     	ds	1
   196  015                     setRelay@RelayBit:	
   197                           
   198                           ; 1 bytes @ 0x5
   199  015                     	ds	1
   200  016                     ??_main:	
   201                           
   202                           ; 1 bytes @ 0x6
   203  016                     	ds	2
   204  018                     main@LowCount:	
   205                           
   206                           ; 2 bytes @ 0x8
   207  018                     	ds	2
   208                           
   209                           	psect	cstackCOMMON
   210  007                     __pcstackCOMMON:	
   211  007                     ??_readNVM:	
   212  007                     ?_writeNVM:	
   213                           ; 1 bytes @ 0x0
   214                           
   215  007                     ?_measurePw:	
   216                           ; 1 bytes @ 0x0
   217                           
   218  007                     ?_setRelay:	
   219                           ; 1 bytes @ 0x0
   220                           
   221  007                     ?_setLED:	
   222                           ; 1 bytes @ 0x0
   223                           
   224  007                     ??_setLED:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  007                     ?_procSetupMode:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  007                     ?_initDevice:	
   231                           ; 1 bytes @ 0x0
   232                           
   233  007                     ?_main:	
   234                           ; 1 bytes @ 0x0
   235                           
   236  007                     readNVM@Addr:	
   237                           ; 1 bytes @ 0x0
   238                           
   239  007                     writeNVM@Data:	
   240                           ; 1 bytes @ 0x0
   241                           
   242                           
   243                           ; 1 bytes @ 0x0
   244  007                     	ds	1
   245  008                     ??_writeNVM:	
   246  008                     ??_measurePw:	
   247                           ; 1 bytes @ 0x1
   248                           
   249                           
   250                           	psect	maintext
   251  076                     __pmaintext:	
   252                           ; 1 bytes @ 0x1
   253 ;;
   254 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   255 ;;
   256 ;; *************** function _main *****************
   257 ;; Defined at:
   258 ;;		line 189 in file "../ServoCrossingSwitch_12F519_v20.c"
   259 ;; Parameters:    Size  Location     Type
   260 ;;		None
   261 ;; Auto vars:     Size  Location     Type
   262 ;;  LowCount        2    8[BANK0 ] unsigned int 
   263 ;; Return value:  Size  Location     Type
   264 ;;                  1  130[None  ] void 
   265 ;; Registers used:
   266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+6, btemp+7, pclath, cstack
   267 ;; Tracked objects:
   268 ;;		On entry : B00/0
   269 ;;		On exit  : 0/0
   270 ;;		Unchanged: 0/0
   271 ;; Data sizes:     COMMON   BANK0   BANK1
   272 ;;      Params:         0       0       0
   273 ;;      Locals:         0       2       0
   274 ;;      Temps:          0       2       0
   275 ;;      Totals:         0       4       0
   276 ;;Total ram usage:        4 bytes
   277 ;; Hardware stack levels required when called:    2
   278 ;; This function calls:
   279 ;;		_initDevice
   280 ;;		_measurePw
   281 ;;		_procSetupMode
   282 ;;		_readNVM
   283 ;;		_setLED
   284 ;;		_setRelay
   285 ;;		_writeNVM
   286 ;; This function is called by:
   287 ;;		Startup code after reset
   288 ;; This function uses a non-reentrant model
   289 ;;
   290                           
   291                           
   292                           ;psect for function _main
   293  076                     _main:	
   294                           
   295                           ;ServoCrossingSwitch_12F519_v20.c: 191: initDevice();
   296                           
   297                           ;incstack = 0
   298                           ; Regs used in _main: [wreg-fsr0h+status,2-btemp+0+btemp+6+btemp+7+pclath+cstack]
   299  076  4A3  91C  4A3      	fcall	entry__initDevice
   300                           
   301                           ;ServoCrossingSwitch_12F519_v20.c: 192: PwMidpos = readNVM(0);
   302  079  C00                	movlw	0
   303  07A  4A3  91E  4A3      	fcall	entry__readNVM
   304  07D  4A4                	bcf	4,5	;FSR5=0, select bank0
   305  07E  210                	movf	?_readNVM,w
   306  07F  03A                	movwf	_PwMidpos
   307                           
   308                           ;ServoCrossingSwitch_12F519_v20.c: 193: if(( PwMidpos >= 168 ) || ( PwMidpos <= 20 )){
   309  080  CA8                	movlw	168
   310  081  09A                	subwf	_PwMidpos,w
   311  082  603                	skipnc
   312  083  A88                	goto	l888
   313  084  C15                	movlw	21
   314  085  09A                	subwf	_PwMidpos,w
   315  086  603                	skipnc
   316  087  AC8                	goto	l914
   317  088                     l888:	
   318                           
   319                           ;ServoCrossingSwitch_12F519_v20.c: 194: PwMidpos = 94;
   320  088  C5E                	movlw	94
   321  089  03A                	movwf	_PwMidpos
   322                           
   323                           ;ServoCrossingSwitch_12F519_v20.c: 195: writeNVM(0, PwMidpos);
   324  08A  21A                	movf	_PwMidpos,w
   325  08B  027                	movwf	writeNVM@Data
   326  08C  C00                	movlw	0
   327  08D  4A3  918  4A3      	fcall	entry__writeNVM
   328  090  AC8                	goto	l914
   329  091                     l900:	
   330                           ;ServoCrossingSwitch_12F519_v20.c: 196: }
   331                           ;ServoCrossingSwitch_12F519_v20.c: 197: unsigned int LowCount = 0;
   332                           
   333                           
   334                           ;ServoCrossingSwitch_12F519_v20.c: 202: PwNow = measurePw();
   335  091  4A3  91A  4A3      	fcall	entry__measurePw
   336  094  207                	movf	?_measurePw,w
   337  095  4A4                	bcf	4,5	;FSR5=0, select bank0
   338  096  03D                	movwf	_PwNow
   339                           
   340                           ;ServoCrossingSwitch_12F519_v20.c: 203: if(PwNow > 168){
   341  097  CA9                	movlw	169
   342  098  09D                	subwf	_PwNow,w
   343  099  703                	skipc
   344  09A  AAA                	goto	l908
   345                           
   346                           ;ServoCrossingSwitch_12F519_v20.c: 204: setLED(1);
   347  09B  C01                	movlw	1
   348  09C  4A3  914  4A3      	fcall	entry__setLED
   349                           
   350                           ;ServoCrossingSwitch_12F519_v20.c: 205: _delay((unsigned long)((15)*(4000000/4000.0)));
   351  09F  C14                	movlw	20
   352  0A0  4A4                	bcf	4,5	;FSR5=0, select bank0
   353  0A1  037                	movwf	??_main+1
   354  0A2  C79                	movlw	121
   355  0A3  036                	movwf	??_main
   356  0A4                     u897:	
   357  0A4  2F6                	decfsz	??_main,f
   358  0A5  AA4                	goto	u897
   359  0A6  2F7                	decfsz	??_main+1,f
   360  0A7  AA4                	goto	u897
   361  0A8  000                	nop
   362                           
   363                           ;ServoCrossingSwitch_12F519_v20.c: 206: }
   364  0A9  AC8                	goto	l914
   365  0AA                     l908:	
   366                           
   367                           ;ServoCrossingSwitch_12F519_v20.c: 207: else{
   368                           ;ServoCrossingSwitch_12F519_v20.c: 208: setRelay(PwNow > PwThreshold[RelayState] );
   369  0AA  4A4                	bcf	4,5	;FSR5=0, select bank0
   370  0AB  21D                	movf	_PwNow,w
   371  0AC  02F                	movwf	15
   372  0AD  C00                	movlw	0
   373  0AE  61F                	btfsc	_RelayState/(0+8),_RelayState& (0+7)
   374  0AF  C01                	movlw	1
   375  0B0  028                	movwf	8
   376  0B1  C30                	movlw	low (_PwThreshold| 0)
   377  0B2  1C8                	addwf	8,w
   378  0B3  024                	movwf	4
   379  0B4  200                	movf	0,w
   380  0B5  4A4                	bcf	4,5	;FSR5=0, select bank0
   381  0B6  036                	movwf	??_main
   382  0B7  20F                	movf	15,w
   383  0B8  096                	subwf	??_main,w
   384  0B9  603                	btfsc	3,0
   385  0BA  ABD                	goto	u860
   386  0BB  C01                	movlw	1
   387  0BC  ABE                	goto	u870
   388  0BD                     u860:	
   389  0BD  C00                	movlw	0
   390  0BE                     u870:	
   391  0BE  4A3  912  4A3      	fcall	entry__setRelay
   392                           
   393                           ;ServoCrossingSwitch_12F519_v20.c: 209: setLED(0);
   394  0C1  C00                	movlw	0
   395  0C2  4A3  914  4A3      	fcall	entry__setLED
   396                           
   397                           ;ServoCrossingSwitch_12F519_v20.c: 210: procSetupMode();
   398  0C5  4A3  916  4A3      	fcall	entry__procSetupMode
   399  0C8                     l914:	
   400                           
   401                           ;ServoCrossingSwitch_12F519_v20.c: 211: }
   402                           ;ServoCrossingSwitch_12F519_v20.c: 212: LowCount = 0;
   403  0C8  4A4                	bcf	4,5	;FSR5=0, select bank0
   404  0C9  078                	clrf	main@LowCount
   405  0CA  079                	clrf	main@LowCount+1
   406  0CB                     l894:	
   407                           ;ServoCrossingSwitch_12F519_v20.c: 198: while(1){
   408                           
   409                           ;ServoCrossingSwitch_12F519_v20.c: 213: }
   410                           
   411                           
   412                           ;ServoCrossingSwitch_12F519_v20.c: 199: PwThreshold[1] = PwMidpos-2;
   413  0CB  CFE                	movlw	254
   414  0CC  1DA                	addwf	_PwMidpos,w
   415  0CD  5A4                	bsf	4,5	;FSR5=1, select bank1
   416  0CE  031                	movwf	(_PwThreshold^(0+32)+1)
   417                           
   418                           ;ServoCrossingSwitch_12F519_v20.c: 200: PwThreshold[0] = PwMidpos+2;
   419  0CF  C02                	movlw	2
   420  0D0  4A4                	bcf	4,5	;FSR5=0, select bank0
   421  0D1  1DA                	addwf	_PwMidpos,w
   422  0D2  5A4                	bsf	4,5	;FSR5=1, select bank1
   423  0D3  030                	movwf	_PwThreshold^(0+32)
   424                           
   425                           ;ServoCrossingSwitch_12F519_v20.c: 201: if( RB3 == 1 ){
   426  0D4  4A4                	bcf	4,5	;FSR5=0, select bank0
   427  0D5  666                	btfsc	6,3	;volatile
   428  0D6  A91                	goto	l900
   429                           
   430                           ;ServoCrossingSwitch_12F519_v20.c: 214: else{
   431                           ;ServoCrossingSwitch_12F519_v20.c: 215: if( ++LowCount > 2500 ){
   432  0D7  C01                	movlw	1
   433  0D8  02E                	movwf	14
   434  0D9  06F                	clrf	15
   435  0DA  20E                	movf	14,w
   436  0DB  1F8                	addwf	main@LowCount,f
   437  0DC  603                	skipnc
   438  0DD  2B9                	incf	main@LowCount+1,f
   439  0DE  20F                	movf	15,w
   440  0DF  1F9                	addwf	main@LowCount+1,f
   441  0E0  C09                	movlw	9
   442  0E1  099                	subwf	main@LowCount+1,w
   443  0E2  CC5                	movlw	197
   444  0E3  643                	skipnz
   445  0E4  098                	subwf	main@LowCount,w
   446  0E5  703                	skipc
   447  0E6  ACB                	goto	l894
   448                           
   449                           ;ServoCrossingSwitch_12F519_v20.c: 216: setLED(1);
   450  0E7  C01                	movlw	1
   451  0E8  4A3  914  4A3      	fcall	entry__setLED
   452  0EB  AC8                	goto	l914
   453  0EC                     __end_of_main:	
   454                           ;ServoCrossingSwitch_12F519_v20.c: 217: LowCount = 0;
   455                           
   456                           
   457                           	psect	text1
   458  037                     __ptext1:	
   459 ;; *************** function _setRelay *****************
   460 ;; Defined at:
   461 ;;		line 102 in file "../ServoCrossingSwitch_12F519_v20.c"
   462 ;; Parameters:    Size  Location     Type
   463 ;;  RelayBit        1    wreg     unsigned char 
   464 ;; Auto vars:     Size  Location     Type
   465 ;;  RelayBit        1    5[BANK0 ] unsigned char 
   466 ;; Return value:  Size  Location     Type
   467 ;;                  1   62[None  ] void 
   468 ;; Registers used:
   469 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+6, btemp+7, pclath, cstack
   470 ;; Tracked objects:
   471 ;;		On entry : 0/0
   472 ;;		On exit  : 0/0
   473 ;;		Unchanged: 0/0
   474 ;; Data sizes:     COMMON   BANK0   BANK1
   475 ;;      Params:         0       0       0
   476 ;;      Locals:         0       3       0
   477 ;;      Temps:          0       2       0
   478 ;;      Totals:         0       5       0
   479 ;;Total ram usage:        5 bytes
   480 ;; Hardware stack levels used:    1
   481 ;; Hardware stack levels required when called:    1
   482 ;; This function calls:
   483 ;;		_writeNVM
   484 ;; This function is called by:
   485 ;;		_main
   486 ;; This function uses a non-reentrant model
   487 ;;
   488                           
   489                           
   490                           ;psect for function _setRelay
   491  037                     _setRelay:	
   492                           
   493                           ;setRelay@RelayBit stored from wreg
   494  037  4A4                	bcf	4,5	;FSR5=0, select bank0
   495  038  035                	movwf	setRelay@RelayBit
   496                           
   497                           ;ServoCrossingSwitch_12F519_v20.c: 104: RB0 = RelayBit;
   498  039  715                	btfss	setRelay@RelayBit,0
   499  03A  A3E                	goto	u470
   500  03B  4A4                	bcf	4,5	;FSR5=0, select bank0
   501  03C  506                	bsf	6,0	;volatile
   502  03D  A40                	goto	l760
   503  03E                     u470:	
   504  03E  4A4                	bcf	4,5	;FSR5=0, select bank0
   505  03F  406                	bcf	6,0	;volatile
   506  040                     l760:	
   507                           
   508                           ;ServoCrossingSwitch_12F519_v20.c: 105: PortValue = PORTB;
   509  040  206                	movf	6,w	;volatile
   510  041  5A4                	bsf	4,5	;FSR5=1, select bank1
   511  042  035                	movwf	_PortValue^(0+32)
   512                           
   513                           ;ServoCrossingSwitch_12F519_v20.c: 106: PORTB = (RelayBit)?(PortValue|0b00110000):(PortV
      +                          alue&~0b00110000);
   514  043  4A4                	bcf	4,5	;FSR5=0, select bank0
   515  044  215                	movf	setRelay@RelayBit,w
   516  045  743                	btfss	3,2
   517  046  A4E                	goto	l766
   518  047  5A4                	bsf	4,5	;FSR5=1, select bank1
   519  048  215                	movf	_PortValue^(0+32),w
   520  049  ECF                	andlw	207
   521  04A  02E                	movwf	14
   522  04B  06F                	clrf	15
   523  04C  20E                	movf	14,w
   524  04D  A54                	goto	L1
   525  04E                     l766:	
   526  04E  C30                	movlw	48
   527  04F  02E                	movwf	14
   528  050  06F                	clrf	15
   529  051  20E                	movf	14,w
   530  052  5A4                	bsf	4,5	;FSR5=1, select bank1
   531  053  115                	iorwf	_PortValue^(0+32),w
   532  054                     L1:	
   533  054  4A4                	bcf	4,5	;FSR5=0, select bank0
   534  055  033                	movwf	_setRelay$74
   535  056  20F                	movf	15,w
   536  057  034                	movwf	_setRelay$74+1
   537  058  213                	movf	_setRelay$74,w
   538  059  026                	movwf	6	;volatile
   539                           
   540                           ;ServoCrossingSwitch_12F519_v20.c: 107: if(RelayBit != RelayState){
   541  05A  215                	movf	setRelay@RelayBit,w
   542  05B  02F                	movwf	15
   543  05C  C00                	movlw	0
   544  05D  61F                	btfsc	_RelayState/(0+8),_RelayState& (0+7)
   545  05E  C01                	movlw	1
   546  05F  18F                	xorwf	15,w
   547  060  643                	skipnz
   548  061  800                	retlw	0
   549                           
   550                           ;ServoCrossingSwitch_12F519_v20.c: 108: RelayState = RelayBit;
   551  062  41F                	bcf	_RelayState/(0+8),_RelayState& (0+7)
   552  063  615                	btfsc	setRelay@RelayBit,0
   553  064  51F                	bsf	_RelayState/(0+8),_RelayState& (0+7)
   554                           
   555                           ;ServoCrossingSwitch_12F519_v20.c: 109: writeNVM(8, (unsigned char)RelayBit);
   556  065  4A4                	bcf	4,5	;FSR5=0, select bank0
   557  066  215                	movf	setRelay@RelayBit,w
   558  067  027                	movwf	writeNVM@Data
   559  068  C08                	movlw	8
   560  069  4A3  918  4A3      	fcall	entry__writeNVM
   561                           
   562                           ;ServoCrossingSwitch_12F519_v20.c: 110: _delay((unsigned long)((97)*(4000000/4000.0)));
   563  06C  C7E                	movlw	126
   564  06D  4A4                	bcf	4,5	;FSR5=0, select bank0
   565  06E  032                	movwf	??_setRelay+1
   566  06F  CF8                	movlw	248
   567  070  031                	movwf	??_setRelay
   568  071                     u907:	
   569  071  2F1                	decfsz	??_setRelay,f
   570  072  A71                	goto	u907
   571  073  2F2                	decfsz	??_setRelay+1,f
   572  074  A71                	goto	u907
   573  075  800                	retlw	0
   574  076                     __end_of_setRelay:	
   575                           
   576                           	psect	jmp_tab
   577  012                     __pjmp_tab:	
   578                           ;incstack = 0
   579                           ; Regs used in _setRelay: [wreg-fsr0h+status,2+status,0+btemp+6+btemp+7+pclath+cstack]
   580                           
   581  012                     entry__setRelay:	
   582  012  4A3  A37           	ljmp	_setRelay
   583  014                     entry__setLED:	
   584                           ;incstack = 0
   585                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+btemp+7]
   586                           
   587  014  4A3  B65           	ljmp	_setLED
   588  016                     entry__procSetupMode:	
   589                           ;incstack = 0
   590                           ; Regs used in _procSetupMode: [wreg-fsr0h+status,2-btemp+0+btemp+6+btemp+7+pclath+cstac
      +                          k]
   591                           
   592  016  4A3  AEC           	ljmp	_procSetupMode
   593  018                     entry__writeNVM:	
   594                           ;incstack = 0
   595                           ; Regs used in _writeNVM: [wregfsr0]
   596                           
   597  018  4A3  A26           	ljmp	_writeNVM
   598  01A                     entry__measurePw:	
   599                           ;incstack = 0
   600                           ; Regs used in _measurePw: [wreg-fsr0h+status,2]
   601                           
   602  01A  5A3  BD2           	ljmp	_measurePw
   603  01C                     entry__initDevice:	
   604                           ;incstack = 0
   605                           ; Regs used in _initDevice: [wreg-fsr0h+status,2+pclath+cstack]
   606                           
   607  01C  5A3  BDD           	ljmp	_initDevice
   608  01E                     entry__readNVM:	
   609                           ;incstack = 0
   610                           ; Regs used in _readNVM: [wregfsr0]
   611                           
   612  01E  5A3  BC9           	ljmp	_readNVM
   613                           
   614                           	psect	text2
   615  165                     __ptext2:	
   616 ;; *************** function _setLED *****************
   617 ;; Defined at:
   618 ;;		line 114 in file "../ServoCrossingSwitch_12F519_v20.c"
   619 ;; Parameters:    Size  Location     Type
   620 ;;  LedMode         1    wreg     unsigned char 
   621 ;; Auto vars:     Size  Location     Type
   622 ;;  LedMode         1    0[BANK0 ] unsigned char 
   623 ;; Return value:  Size  Location     Type
   624 ;;                  1   70[None  ] void 
   625 ;; Registers used:
   626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+7
   627 ;; Tracked objects:
   628 ;;		On entry : 0/0
   629 ;;		On exit  : 0/0
   630 ;;		Unchanged: 0/0
   631 ;; Data sizes:     COMMON   BANK0   BANK1
   632 ;;      Params:         0       0       0
   633 ;;      Locals:         0       5       0
   634 ;;      Temps:          0       0       0
   635 ;;      Totals:         0       5       0
   636 ;;Total ram usage:        5 bytes
   637 ;; Hardware stack levels used:    1
   638 ;; This function calls:
   639 ;;		Nothing
   640 ;; This function is called by:
   641 ;;		_main
   642 ;; This function uses a non-reentrant model
   643 ;;
   644                           
   645                           
   646                           ;psect for function _setLED
   647  165                     _setLED:	
   648                           
   649                           ;setLED@LedMode stored from wreg
   650  165  4A4                	bcf	4,5	;FSR5=0, select bank0
   651  166  030                	movwf	setLED@LedMode
   652                           
   653                           ;ServoCrossingSwitch_12F519_v20.c: 124: static unsigned char LedCycleCount = 0;
   654                           ;ServoCrossingSwitch_12F519_v20.c: 125: static unsigned char LedBeat = 0;
   655                           ;ServoCrossingSwitch_12F519_v20.c: 126: NoSigState = (LedMode == 1) ? 1 : 0;
   656  167  0D0                	decf	setLED@LedMode,w
   657  168  743                	btfss	3,2
   658  169  B6D                	goto	u520
   659  16A  4A4                	bcf	4,5	;FSR5=0, select bank0
   660  16B  51E                	bsf	_NoSigState/(0+8),_NoSigState& (0+7)
   661  16C  B6F                	goto	l780
   662  16D                     u520:	
   663  16D  4A4                	bcf	4,5	;FSR5=0, select bank0
   664  16E  41E                	bcf	_NoSigState/(0+8),_NoSigState& (0+7)
   665  16F                     l780:	
   666                           
   667                           ;ServoCrossingSwitch_12F519_v20.c: 127: if(++LedCycleCount > 4){
   668  16F  C01                	movlw	1
   669  170  02F                	movwf	15
   670  171  20F                	movf	15,w
   671  172  5A4                	bsf	4,5	;FSR5=1, select bank1
   672  173  1F4                	addwf	setLED@LedCycleCount^(0+32),f
   673  174  C05                	movlw	5
   674  175  094                	subwf	setLED@LedCycleCount^(0+32),w
   675  176  703                	skipc
   676  177  800                	retlw	0
   677                           
   678                           ;ServoCrossingSwitch_12F519_v20.c: 128: LedCycleCount = 0;
   679  178  074                	clrf	setLED@LedCycleCount^(0+32)
   680                           
   681                           ;ServoCrossingSwitch_12F519_v20.c: 129: switch(++LedBeat){
   682  179  BC8                	goto	l826
   683  17A                     l784:	
   684                           ;ServoCrossingSwitch_12F519_v20.c: 130: case 1: RB2 = 1; break;
   685                           
   686  17A  4A4                	bcf	4,5	;FSR5=0, select bank0
   687  17B  546                	bsf	6,2	;volatile
   688  17C  800                	retlw	0
   689  17D                     l786:	
   690                           ;ServoCrossingSwitch_12F519_v20.c: 131: case 2: case 3: RB2 = SetupState | ErrorState; b
      +                          reak;
   691                           
   692  17D  4A4                	bcf	4,5	;FSR5=0, select bank0
   693  17E  071                	clrf	_setLED$80
   694  17F  2B1                	incf	_setLED$80,f
   695  180  73E                	btfss	_SetupState/(0+8),_SetupState& (0+7)
   696  181  65E                	btfsc	_ErrorState/(0+8),_ErrorState& (0+7)
   697  182  B84                	goto	l792
   698  183  071                	clrf	_setLED$80
   699  184                     l792:	
   700  184  211                	movf	_setLED$80,w
   701  185  02F                	movwf	15
   702  186  30F                	rrf	15,w
   703  187  703                	skipc
   704  188  446                	bcf	6,2	;volatile
   705  189  603                	skipnc
   706  18A  546                	bsf	6,2	;volatile
   707  18B  800                	retlw	0
   708  18C                     l794:	
   709                           ;ServoCrossingSwitch_12F519_v20.c: 132: case 4: RB2 = RelayState | SetupState | ErrorSta
      +                          te; break;
   710                           
   711  18C  4A4                	bcf	4,5	;FSR5=0, select bank0
   712  18D  072                	clrf	_setLED$81
   713  18E  2B2                	incf	_setLED$81,f
   714  18F  71F                	btfss	_RelayState/(0+8),_RelayState& (0+7)
   715  190  63E                	btfsc	_SetupState/(0+8),_SetupState& (0+7)
   716  191  B94                	goto	l802
   717  192  75E                	btfss	_ErrorState/(0+8),_ErrorState& (0+7)
   718  193  072                	clrf	_setLED$81
   719  194                     l802:	
   720  194  212                	movf	_setLED$81,w
   721  195  02F                	movwf	15
   722  196  30F                	rrf	15,w
   723  197  703                	skipc
   724  198  446                	bcf	6,2	;volatile
   725  199  603                	skipnc
   726  19A  546                	bsf	6,2	;volatile
   727  19B  800                	retlw	0
   728  19C                     l804:	
   729                           ;ServoCrossingSwitch_12F519_v20.c: 133: case 5: case 6: case 7: case 8: case 9:
   730                           
   731                           
   732                           ;ServoCrossingSwitch_12F519_v20.c: 134: RB2 = SetupState | ErrorState; break;
   733  19C  4A4                	bcf	4,5	;FSR5=0, select bank0
   734  19D  073                	clrf	_setLED$82
   735  19E  2B3                	incf	_setLED$82,f
   736  19F  73E                	btfss	_SetupState/(0+8),_SetupState& (0+7)
   737  1A0  65E                	btfsc	_ErrorState/(0+8),_ErrorState& (0+7)
   738  1A1  BA3                	goto	l810
   739  1A2  073                	clrf	_setLED$82
   740  1A3                     l810:	
   741  1A3  213                	movf	_setLED$82,w
   742  1A4  02F                	movwf	15
   743  1A5  30F                	rrf	15,w
   744  1A6  703                	skipc
   745  1A7  446                	bcf	6,2	;volatile
   746  1A8  603                	skipnc
   747  1A9  546                	bsf	6,2	;volatile
   748  1AA  800                	retlw	0
   749  1AB                     l812:	
   750                           ;ServoCrossingSwitch_12F519_v20.c: 135: case 10: case 11: case 12: case 13:
   751                           
   752                           
   753                           ;ServoCrossingSwitch_12F519_v20.c: 136: RB2 = NoSigState | ErrorState; break;
   754  1AB  4A4                	bcf	4,5	;FSR5=0, select bank0
   755  1AC  074                	clrf	_setLED$83
   756  1AD  2B4                	incf	_setLED$83,f
   757  1AE  71E                	btfss	_NoSigState/(0+8),_NoSigState& (0+7)
   758  1AF  65E                	btfsc	_ErrorState/(0+8),_ErrorState& (0+7)
   759  1B0  BB2                	goto	l818
   760  1B1  074                	clrf	_setLED$83
   761  1B2                     l818:	
   762  1B2  214                	movf	_setLED$83,w
   763  1B3  02F                	movwf	15
   764  1B4  30F                	rrf	15,w
   765  1B5  703                	skipc
   766  1B6  446                	bcf	6,2	;volatile
   767  1B7  603                	skipnc
   768  1B8  546                	bsf	6,2	;volatile
   769  1B9  800                	retlw	0
   770  1BA                     l820:	
   771                           ;ServoCrossingSwitch_12F519_v20.c: 137: case 14: case 15: RB2 = ErrorState; break;
   772                           
   773  1BA  4A4                	bcf	4,5	;FSR5=0, select bank0
   774  1BB  75E                	btfss	_ErrorState/(0+8),_ErrorState& (0+7)
   775  1BC  BC0                	goto	u640
   776  1BD  4A4                	bcf	4,5	;FSR5=0, select bank0
   777  1BE  546                	bsf	6,2	;volatile
   778  1BF  800                	retlw	0
   779  1C0                     u640:	
   780  1C0  4A4                	bcf	4,5	;FSR5=0, select bank0
   781  1C1  446                	bcf	6,2	;volatile
   782  1C2  800                	retlw	0
   783  1C3                     l822:	
   784                           ;ServoCrossingSwitch_12F519_v20.c: 138: case 16: RB2 = 0; LedBeat = 0;
   785                           
   786  1C3  4A4                	bcf	4,5	;FSR5=0, select bank0
   787  1C4  446                	bcf	6,2	;volatile
   788  1C5  5A4                	bsf	4,5	;FSR5=1, select bank1
   789  1C6  073                	clrf	setLED@LedBeat^(0+32)
   790                           
   791                           ;ServoCrossingSwitch_12F519_v20.c: 139: }
   792  1C7  800                	retlw	0
   793  1C8                     l826:	
   794  1C8  C01                	movlw	1
   795  1C9  02F                	movwf	15
   796  1CA  20F                	movf	15,w
   797  1CB  1F3                	addwf	setLED@LedBeat^(0+32),f
   798  1CC  213                	movf	setLED@LedBeat^(0+32),w
   799                           
   800                           ; Switch size 1, requested type "space"
   801                           ; Number of cases is 16, Range of values is 1 to 16
   802                           ; switch strategies available:
   803                           ; Name         Instructions Cycles
   804                           ; simple_byte           49    25 (average)
   805                           ;	Chosen strategy is simple_byte
   806  1CD  F01                	xorlw	1	; case 1
   807  1CE  643                	skipnz
   808  1CF  B7A                	goto	l784
   809  1D0  F03                	xorlw	3	; case 2
   810  1D1  643                	skipnz
   811  1D2  B7D                	goto	l786
   812  1D3  F01                	xorlw	1	; case 3
   813  1D4  643                	skipnz
   814  1D5  B7D                	goto	l786
   815  1D6  F07                	xorlw	7	; case 4
   816  1D7  643                	skipnz
   817  1D8  B8C                	goto	l794
   818  1D9  F01                	xorlw	1	; case 5
   819  1DA  643                	skipnz
   820  1DB  B9C                	goto	l804
   821  1DC  F03                	xorlw	3	; case 6
   822  1DD  643                	skipnz
   823  1DE  B9C                	goto	l804
   824  1DF  F01                	xorlw	1	; case 7
   825  1E0  643                	skipnz
   826  1E1  B9C                	goto	l804
   827  1E2  F0F                	xorlw	15	; case 8
   828  1E3  643                	skipnz
   829  1E4  B9C                	goto	l804
   830  1E5  F01                	xorlw	1	; case 9
   831  1E6  643                	skipnz
   832  1E7  B9C                	goto	l804
   833  1E8  F03                	xorlw	3	; case 10
   834  1E9  643                	skipnz
   835  1EA  BAB                	goto	l812
   836  1EB  F01                	xorlw	1	; case 11
   837  1EC  643                	skipnz
   838  1ED  BAB                	goto	l812
   839  1EE  F07                	xorlw	7	; case 12
   840  1EF  643                	skipnz
   841  1F0  BAB                	goto	l812
   842  1F1  F01                	xorlw	1	; case 13
   843  1F2  643                	skipnz
   844  1F3  BAB                	goto	l812
   845  1F4  F03                	xorlw	3	; case 14
   846  1F5  643                	skipnz
   847  1F6  BBA                	goto	l820
   848  1F7  F01                	xorlw	1	; case 15
   849  1F8  643                	skipnz
   850  1F9  BBA                	goto	l820
   851  1FA  F1F                	xorlw	31	; case 16
   852  1FB  643                	skipnz
   853  1FC  BC3                	goto	l822
   854  1FD  BFF                	goto	l102
   855  1FE  800                	retlw	0
   856  1FF                     l102:	
   857  1FF  800                	retlw	0
   858  200                     __end_of_setLED:	
   859                           
   860                           	psect	text3
   861  0EC                     __ptext3:	
   862 ;; *************** function _procSetupMode *****************
   863 ;; Defined at:
   864 ;;		line 143 in file "../ServoCrossingSwitch_12F519_v20.c"
   865 ;; Parameters:    Size  Location     Type
   866 ;;		None
   867 ;; Auto vars:     Size  Location     Type
   868 ;;		None
   869 ;; Return value:  Size  Location     Type
   870 ;;                  1  104[None  ] void 
   871 ;; Registers used:
   872 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+0, btemp+6, btemp+7, pclath, cstack
   873 ;; Tracked objects:
   874 ;;		On entry : 0/0
   875 ;;		On exit  : 0/0
   876 ;;		Unchanged: 0/0
   877 ;; Data sizes:     COMMON   BANK0   BANK1
   878 ;;      Params:         0       0       0
   879 ;;      Locals:         0       2       0
   880 ;;      Temps:          0       3       0
   881 ;;      Totals:         0       5       0
   882 ;;Total ram usage:        5 bytes
   883 ;; Hardware stack levels used:    1
   884 ;; Hardware stack levels required when called:    1
   885 ;; This function calls:
   886 ;;		_writeNVM
   887 ;; This function is called by:
   888 ;;		_main
   889 ;; This function uses a non-reentrant model
   890 ;;
   891                           
   892                           
   893                           ;psect for function _procSetupMode
   894  0EC                     _procSetupMode:	
   895                           
   896                           ;ServoCrossingSwitch_12F519_v20.c: 145: static unsigned char Debounce = 0;
   897                           ;ServoCrossingSwitch_12F519_v20.c: 146: if(ErrorStateCount > 0){ ErrorStateCount--;}else
      +                          {ErrorState = 0;}
   898  0EC  5A4                	bsf	4,5	;FSR5=1, select bank1
   899  0ED  216                	movf	_ErrorStateCount^(0+32),w
   900  0EE  643                	btfsc	3,2
   901  0EF  AF3                	goto	l832
   902  0F0  C01                	movlw	1
   903  0F1  0B6                	subwf	_ErrorStateCount^(0+32),f
   904  0F2  AF5                	goto	l108
   905  0F3                     l832:	
   906  0F3  4A4                	bcf	4,5	;FSR5=0, select bank0
   907  0F4  45E                	bcf	_ErrorState/(0+8),_ErrorState& (0+7)
   908  0F5                     l108:	
   909                           
   910                           ;ServoCrossingSwitch_12F519_v20.c: 148: RB0 = 0;
   911  0F5  4A4                	bcf	4,5	;FSR5=0, select bank0
   912  0F6  406                	bcf	6,0	;volatile
   913                           
   914                           ;ServoCrossingSwitch_12F519_v20.c: 149: if(RB1 == 0){
   915  0F7  626                	btfsc	6,1	;volatile
   916  0F8  B11                	goto	l846
   917                           
   918                           ;ServoCrossingSwitch_12F519_v20.c: 150: RB0 = RelayState;
   919  0F9  71F                	btfss	_RelayState/(0+8),_RelayState& (0+7)
   920  0FA  AFE                	goto	u680
   921  0FB  4A4                	bcf	4,5	;FSR5=0, select bank0
   922  0FC  506                	bsf	6,0	;volatile
   923  0FD  B00                	goto	l836
   924  0FE                     u680:	
   925  0FE  4A4                	bcf	4,5	;FSR5=0, select bank0
   926  0FF  406                	bcf	6,0	;volatile
   927  100                     l836:	
   928                           
   929                           ;ServoCrossingSwitch_12F519_v20.c: 151: if(Debounce < 5 ){ Debounce++; }
   930  100  C05                	movlw	5
   931  101  5A4                	bsf	4,5	;FSR5=1, select bank1
   932  102  092                	subwf	procSetupMode@Debounce^(0+32),w
   933  103  603                	skipnc
   934  104  B0A                	goto	l840
   935  105  C01                	movlw	1
   936  106  02F                	movwf	15
   937  107  20F                	movf	15,w
   938  108  1F2                	addwf	procSetupMode@Debounce^(0+32),f
   939  109  800                	retlw	0
   940  10A                     l840:	
   941                           
   942                           ;ServoCrossingSwitch_12F519_v20.c: 152: else{
   943                           ;ServoCrossingSwitch_12F519_v20.c: 153: if(SetupState == 0){
   944  10A  4A4                	bcf	4,5	;FSR5=0, select bank0
   945  10B  63E                	btfsc	_SetupState/(0+8),_SetupState& (0+7)
   946  10C  800                	retlw	0
   947                           
   948                           ;ServoCrossingSwitch_12F519_v20.c: 154: PwSaved = PwNow;
   949  10D  21D                	movf	_PwNow,w
   950  10E  03C                	movwf	_PwSaved
   951                           
   952                           ;ServoCrossingSwitch_12F519_v20.c: 155: SetupState = 1;
   953  10F  53E                	bsf	_SetupState/(0+8),_SetupState& (0+7)
   954                           
   955                           ;ServoCrossingSwitch_12F519_v20.c: 156: }
   956                           ;ServoCrossingSwitch_12F519_v20.c: 157: }
   957                           ;ServoCrossingSwitch_12F519_v20.c: 158: }
   958  110  800                	retlw	0
   959  111                     l846:	
   960                           
   961                           ;ServoCrossingSwitch_12F519_v20.c: 159: else{
   962                           ;ServoCrossingSwitch_12F519_v20.c: 160: RB0 = RelayState;
   963  111  71F                	btfss	_RelayState/(0+8),_RelayState& (0+7)
   964  112  B16                	goto	u720
   965  113  4A4                	bcf	4,5	;FSR5=0, select bank0
   966  114  506                	bsf	6,0	;volatile
   967  115  B18                	goto	u734
   968  116                     u720:	
   969  116  4A4                	bcf	4,5	;FSR5=0, select bank0
   970  117  406                	bcf	6,0	;volatile
   971  118                     u734:	
   972                           
   973                           ;ServoCrossingSwitch_12F519_v20.c: 161: if(SetupState == 1){
   974  118  73E                	btfss	_SetupState/(0+8),_SetupState& (0+7)
   975  119  B60                	goto	l866
   976                           
   977                           ;ServoCrossingSwitch_12F519_v20.c: 162: PwDiff2 = (signed char)(PwNow>>1) - (signed char
      +                          )(PwSaved>>1);
   978  11A  21D                	movf	_PwNow,w
   979  11B  02F                	movwf	15
   980  11C  C01                	movlw	1
   981  11D  031                	movwf	??_procSetupMode
   982  11E                     u755:	
   983  11E  403                	clrc
   984  11F  32F                	rrf	15,f
   985  120  2F1                	decfsz	??_procSetupMode,f
   986  121  B1E                	goto	u755
   987  122  21C                	movf	_PwSaved,w
   988  123  032                	movwf	??_procSetupMode+1
   989  124  403                	clrc
   990  125  312                	rrf	??_procSetupMode+1,w
   991  126  FFF                	xorlw	255
   992  127  033                	movwf	??_procSetupMode+2
   993  128  293                	incf	??_procSetupMode+2,w
   994  129  1CF                	addwf	15,w
   995  12A  03B                	movwf	_PwDiff2
   996                           
   997                           ;ServoCrossingSwitch_12F519_v20.c: 164: if( ((PwDiff2 < 0) ? (-PwDiff2) : (PwDiff2)) <= 
      +                          4 ){
   998  12B  6FB                	btfsc	_PwDiff2,7
   999  12C  B33                	goto	l854
  1000  12D  21B                	movf	_PwDiff2,w
  1001  12E  034                	movwf	_procSetupMode$86
  1002  12F  075                	clrf	_procSetupMode$86+1
  1003  130  6F4                	btfsc	_procSetupMode$86,7
  1004  131  0F5                	decf	_procSetupMode$86+1,f
  1005  132  B41                	goto	l856
  1006  133                     l854:	
  1007  133  21B                	movf	_PwDiff2,w
  1008  134  02E                	movwf	14
  1009  135  06F                	clrf	15
  1010  136  6EE                	btfsc	14,7
  1011  137  0EF                	decf	15,f
  1012  138  26E                	comf	14,f
  1013  139  26F                	comf	15,f
  1014  13A  2AE                	incf	14,f
  1015  13B  643                	skipnz
  1016  13C  2AF                	incf	15,f
  1017  13D  20E                	movf	14,w
  1018  13E  034                	movwf	_procSetupMode$86
  1019  13F  20F                	movf	15,w
  1020  140  035                	movwf	_procSetupMode$86+1
  1021  141                     l856:	
  1022  141  215                	movf	_procSetupMode$86+1,w
  1023  142  02F                	movwf	15
  1024  143  214                	movf	_procSetupMode$86,w
  1025  144  02E                	movwf	14
  1026  145  20F                	movf	15,w
  1027  146  F80                	xorlw	128
  1028  147  028                	movwf	8
  1029  148  C80                	movlw	128
  1030  149  088                	subwf	8,w
  1031  14A  743                	skipz
  1032  14B  B4E                	goto	u775
  1033  14C  C05                	movlw	5
  1034  14D  08E                	subwf	14,w
  1035  14E                     u775:	
  1036  14E  603                	skipnc
  1037  14F  B56                	goto	l862
  1038                           
  1039                           ;ServoCrossingSwitch_12F519_v20.c: 165: ErrorStateCount = 20;
  1040  150  C14                	movlw	20
  1041  151  5A4                	bsf	4,5	;FSR5=1, select bank1
  1042  152  036                	movwf	_ErrorStateCount^(0+32)
  1043                           
  1044                           ;ServoCrossingSwitch_12F519_v20.c: 166: ErrorState = 1;
  1045  153  4A4                	bcf	4,5	;FSR5=0, select bank0
  1046  154  55E                	bsf	_ErrorState/(0+8),_ErrorState& (0+7)
  1047                           
  1048                           ;ServoCrossingSwitch_12F519_v20.c: 167: }
  1049  155  B60                	goto	l866
  1050  156                     l862:	
  1051                           
  1052                           ;ServoCrossingSwitch_12F519_v20.c: 168: else{
  1053                           ;ServoCrossingSwitch_12F519_v20.c: 169: PwMidpos = (unsigned char)((signed int)PwSaved
  1054                           ;ServoCrossingSwitch_12F519_v20.c: 170: + (signed int)PwDiff2 );
  1055  156  4A4                	bcf	4,5	;FSR5=0, select bank0
  1056  157  21C                	movf	_PwSaved,w
  1057  158  1DB                	addwf	_PwDiff2,w
  1058  159  03A                	movwf	_PwMidpos
  1059                           
  1060                           ;ServoCrossingSwitch_12F519_v20.c: 171: writeNVM(0, PwMidpos);
  1061  15A  21A                	movf	_PwMidpos,w
  1062  15B  027                	movwf	writeNVM@Data
  1063  15C  C00                	movlw	0
  1064  15D  4A3  918  4A3      	fcall	entry__writeNVM
  1065  160                     l866:	
  1066                           
  1067                           ;ServoCrossingSwitch_12F519_v20.c: 172: }
  1068                           ;ServoCrossingSwitch_12F519_v20.c: 173: }
  1069                           ;ServoCrossingSwitch_12F519_v20.c: 174: SetupState = 0;
  1070  160  4A4                	bcf	4,5	;FSR5=0, select bank0
  1071  161  43E                	bcf	_SetupState/(0+8),_SetupState& (0+7)
  1072                           
  1073                           ;ServoCrossingSwitch_12F519_v20.c: 175: Debounce = 0;
  1074  162  5A4                	bsf	4,5	;FSR5=1, select bank1
  1075  163  072                	clrf	procSetupMode@Debounce^(0+32)
  1076  164  800                	retlw	0
  1077  165                     __end_of_procSetupMode:	
  1078                           
  1079                           	psect	text4
  1080  026                     __ptext4:	
  1081 ;; *************** function _writeNVM *****************
  1082 ;; Defined at:
  1083 ;;		line 71 in file "../ServoCrossingSwitch_12F519_v20.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;  Addr            1    wreg     unsigned char 
  1086 ;;  Data            1    0[COMMON] unsigned char 
  1087 ;; Auto vars:     Size  Location     Type
  1088 ;;  Addr            1    0[BANK0 ] unsigned char 
  1089 ;; Return value:  Size  Location     Type
  1090 ;;                  1    0[COMMON] void 
  1091 ;; Registers used:
  1092 ;;		wreg, fsr0l, fsr0h
  1093 ;; Tracked objects:
  1094 ;;		On entry : 0/0
  1095 ;;		On exit  : 0/0
  1096 ;;		Unchanged: 0/0
  1097 ;; Data sizes:     COMMON   BANK0   BANK1
  1098 ;;      Params:         1       0       0
  1099 ;;      Locals:         0       1       0
  1100 ;;      Temps:          0       0       0
  1101 ;;      Totals:         1       1       0
  1102 ;;Total ram usage:        2 bytes
  1103 ;; Hardware stack levels used:    1
  1104 ;; This function calls:
  1105 ;;		Nothing
  1106 ;; This function is called by:
  1107 ;;		_setRelay
  1108 ;;		_procSetupMode
  1109 ;;		_main
  1110 ;; This function uses a non-reentrant model
  1111 ;;
  1112                           
  1113                           
  1114                           ;psect for function _writeNVM
  1115  026                     _writeNVM:	
  1116                           
  1117                           ;writeNVM@Addr stored from wreg
  1118  026  4A4                	bcf	4,5	;FSR5=0, select bank0
  1119  027  030                	movwf	writeNVM@Addr
  1120                           
  1121                           ;ServoCrossingSwitch_12F519_v20.c: 73: EEADR = Addr;
  1122  028  210                	movf	writeNVM@Addr,w
  1123  029  5A4                	bsf	4,5	;FSR5=1, select bank1
  1124  02A  026                	movwf	6	;volatile
  1125                           
  1126                           ;ServoCrossingSwitch_12F519_v20.c: 74: EECONbits.FREE = 1;
  1127  02B  581                	bsf	1,4	;volatile
  1128                           
  1129                           ;ServoCrossingSwitch_12F519_v20.c: 75: EECONbits.WREN = 1;
  1130  02C  541                	bsf	1,2	;volatile
  1131                           
  1132                           ;ServoCrossingSwitch_12F519_v20.c: 76: EECONbits.WR = 1;
  1133  02D  521                	bsf	1,1	;volatile
  1134                           
  1135                           ;ServoCrossingSwitch_12F519_v20.c: 77: EEADR = Addr;
  1136  02E  4A4                	bcf	4,5	;FSR5=0, select bank0
  1137  02F  210                	movf	writeNVM@Addr,w
  1138  030  5A4                	bsf	4,5	;FSR5=1, select bank1
  1139  031  026                	movwf	6	;volatile
  1140                           
  1141                           ;ServoCrossingSwitch_12F519_v20.c: 78: EEDATA = Data;
  1142  032  207                	movf	writeNVM@Data,w
  1143  033  025                	movwf	5	;volatile
  1144                           
  1145                           ;ServoCrossingSwitch_12F519_v20.c: 79: EECONbits.WREN = 1;
  1146  034  541                	bsf	1,2	;volatile
  1147                           
  1148                           ;ServoCrossingSwitch_12F519_v20.c: 80: EECONbits.WR = 1;
  1149  035  521                	bsf	1,1	;volatile
  1150  036  800                	retlw	0
  1151  037                     __end_of_writeNVM:	
  1152                           
  1153                           	psect	text5
  1154  3D2                     __ptext5:	
  1155 ;; *************** function _measurePw *****************
  1156 ;; Defined at:
  1157 ;;		line 83 in file "../ServoCrossingSwitch_12F519_v20.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;		None
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;		None
  1162 ;; Return value:  Size  Location     Type
  1163 ;;                  1    0[COMMON] unsigned char 
  1164 ;; Registers used:
  1165 ;;		wreg, fsr0l, fsr0h, status,2
  1166 ;; Tracked objects:
  1167 ;;		On entry : 0/0
  1168 ;;		On exit  : 0/0
  1169 ;;		Unchanged: 0/0
  1170 ;; Data sizes:     COMMON   BANK0   BANK1
  1171 ;;      Params:         1       0       0
  1172 ;;      Locals:         0       0       0
  1173 ;;      Temps:          0       0       0
  1174 ;;      Totals:         1       0       0
  1175 ;;Total ram usage:        1 bytes
  1176 ;; Hardware stack levels used:    1
  1177 ;; This function calls:
  1178 ;;		Nothing
  1179 ;; This function is called by:
  1180 ;;		_main
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           
  1185                           ;psect for function _measurePw
  1186  3D2                     _measurePw:	
  1187                           
  1188                           ;ServoCrossingSwitch_12F519_v20.c: 97: TMR0 = 0;
  1189  3D2  4A4                	bcf	4,5	;FSR5=0, select bank0
  1190  3D3  061                	clrf	1	;volatile
  1191  3D4                     l750:	
  1192                           ;ServoCrossingSwitch_12F519_v20.c: 98: while( (RB3 == 1) && (TMR0 <= 168) );
  1193                           
  1194  3D4  766                	btfss	6,3	;volatile
  1195  3D5  BDA                	goto	l754
  1196  3D6  CA9                	movlw	169
  1197  3D7  081                	subwf	1,w	;volatile
  1198  3D8  703                	skipc
  1199  3D9  BD4                	goto	l750
  1200  3DA                     l754:	
  1201                           
  1202                           ;ServoCrossingSwitch_12F519_v20.c: 99: return TMR0;
  1203  3DA  201                	movf	1,w	;volatile
  1204  3DB  027                	movwf	?_measurePw
  1205  3DC  800                	retlw	0
  1206  3DD                     __end_of_measurePw:	
  1207                           
  1208                           	psect	text6
  1209  3DD                     __ptext6:	
  1210 ;; *************** function _initDevice *****************
  1211 ;; Defined at:
  1212 ;;		line 179 in file "../ServoCrossingSwitch_12F519_v20.c"
  1213 ;; Parameters:    Size  Location     Type
  1214 ;;		None
  1215 ;; Auto vars:     Size  Location     Type
  1216 ;;		None
  1217 ;; Return value:  Size  Location     Type
  1218 ;;                  1  123[None  ] void 
  1219 ;; Registers used:
  1220 ;;		wreg, fsr0l, fsr0h, status,2, pclath, cstack
  1221 ;; Tracked objects:
  1222 ;;		On entry : 0/0
  1223 ;;		On exit  : 0/0
  1224 ;;		Unchanged: 0/0
  1225 ;; Data sizes:     COMMON   BANK0   BANK1
  1226 ;;      Params:         0       0       0
  1227 ;;      Locals:         0       2       0
  1228 ;;      Temps:          0       1       0
  1229 ;;      Totals:         0       3       0
  1230 ;;Total ram usage:        3 bytes
  1231 ;; Hardware stack levels used:    1
  1232 ;; Hardware stack levels required when called:    1
  1233 ;; This function calls:
  1234 ;;		_readNVM
  1235 ;; This function is called by:
  1236 ;;		_main
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           
  1241                           ;psect for function _initDevice
  1242  3DD                     _initDevice:	
  1243                           
  1244                           ;ServoCrossingSwitch_12F519_v20.c: 181: RelayState = readNVM(8);
  1245  3DD  C08                	movlw	8
  1246  3DE  4A3  91E  5A3      	fcall	entry__readNVM
  1247  3E1  4A4                	bcf	4,5	;FSR5=0, select bank0
  1248  3E2  210                	movf	?_readNVM,w
  1249  3E3  032                	movwf	??_initDevice
  1250  3E4  41F                	bcf	_RelayState/(0+8),_RelayState& (0+7)
  1251  3E5  612                	btfsc	??_initDevice,0
  1252  3E6  51F                	bsf	_RelayState/(0+8),_RelayState& (0+7)
  1253                           
  1254                           ;ServoCrossingSwitch_12F519_v20.c: 182: PORTB = (RelayState) ? 0b00110000 : 0;
  1255  3E7  4A4                	bcf	4,5	;FSR5=0, select bank0
  1256  3E8  61F                	btfsc	_RelayState/(0+8),_RelayState& (0+7)
  1257  3E9  BED                	goto	l876
  1258  3EA  073                	clrf	_initDevice$89
  1259  3EB  074                	clrf	_initDevice$89+1
  1260  3EC  BF1                	goto	l127
  1261  3ED                     l876:	
  1262  3ED  C30                	movlw	48
  1263  3EE  033                	movwf	_initDevice$89
  1264  3EF  C00                	movlw	0
  1265  3F0  034                	movwf	_initDevice$89+1
  1266  3F1                     l127:	
  1267  3F1  213                	movf	_initDevice$89,w
  1268  3F2  026                	movwf	6	;volatile
  1269                           
  1270                           ;ServoCrossingSwitch_12F519_v20.c: 183: RB0 = RelayState;
  1271  3F3  71F                	btfss	_RelayState/(0+8),_RelayState& (0+7)
  1272  3F4  BF8                	goto	u800
  1273  3F5  4A4                	bcf	4,5	;FSR5=0, select bank0
  1274  3F6  506                	bsf	6,0	;volatile
  1275  3F7  BFA                	goto	u814
  1276  3F8                     u800:	
  1277  3F8  4A4                	bcf	4,5	;FSR5=0, select bank0
  1278  3F9  406                	bcf	6,0	;volatile
  1279  3FA                     u814:	
  1280                           
  1281                           ;ServoCrossingSwitch_12F519_v20.c: 184: TRIS = 0b00001010;
  1282  3FA  C0A                	movlw	10
  1283  3FB  006                	tris	6
  1284                           
  1285                           ;ServoCrossingSwitch_12F519_v20.c: 185: OPTION = 0b10000011;
  1286  3FC  C83                	movlw	131
  1287  3FD  002                	option
  1288  3FE  800                	retlw	0
  1289  3FF                     __end_of_initDevice:	
  1290                           
  1291                           	psect	text7
  1292  3C9                     __ptext7:	
  1293 ;; *************** function _readNVM *****************
  1294 ;; Defined at:
  1295 ;;		line 64 in file "../ServoCrossingSwitch_12F519_v20.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;  Addr            1    wreg     unsigned char 
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;  Addr            1    0[COMMON] unsigned char 
  1300 ;; Return value:  Size  Location     Type
  1301 ;;                  1    0[BANK0 ] unsigned char 
  1302 ;; Registers used:
  1303 ;;		wreg, fsr0l, fsr0h
  1304 ;; Tracked objects:
  1305 ;;		On entry : 0/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMMON   BANK0   BANK1
  1309 ;;      Params:         0       2       0
  1310 ;;      Locals:         1       0       0
  1311 ;;      Temps:          0       0       0
  1312 ;;      Totals:         1       2       0
  1313 ;;Total ram usage:        3 bytes
  1314 ;; Hardware stack levels used:    1
  1315 ;; This function calls:
  1316 ;;		Nothing
  1317 ;; This function is called by:
  1318 ;;		_initDevice
  1319 ;;		_main
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           
  1324                           ;psect for function _readNVM
  1325  3C9                     _readNVM:	
  1326                           
  1327                           ;readNVM@Addr stored from wreg
  1328  3C9  027                	movwf	readNVM@Addr
  1329                           
  1330                           ;ServoCrossingSwitch_12F519_v20.c: 66: EEADR = Addr;
  1331  3CA  207                	movf	readNVM@Addr,w
  1332  3CB  5A4                	bsf	4,5	;FSR5=1, select bank1
  1333  3CC  026                	movwf	6	;volatile
  1334                           
  1335                           ;ServoCrossingSwitch_12F519_v20.c: 67: EECONbits.RD = 1;
  1336  3CD  501                	bsf	1,0	;volatile
  1337                           
  1338                           ;ServoCrossingSwitch_12F519_v20.c: 68: return(EEDATA);
  1339  3CE  205                	movf	5,w	;volatile
  1340  3CF  4A4                	bcf	4,5	;FSR5=0, select bank0
  1341  3D0  030                	movwf	?_readNVM
  1342  3D1  800                	retlw	0
  1343  3D2                     __end_of_readNVM:	
  1344  0008                     btemp	set	8	;btemp
  1345  0008                     wtemp0	set	8
  1346  000A                     wtemp1	set	10
  1347  000C                     wtemp2	set	12
  1348  000E                     wtemp3	set	14
  1349  0008                     ttemp0	set	8
  1350  000B                     ttemp1	set	11
  1351  0008                     ltemp0	set	8
  1352  000C                     ltemp1	set	12
  1353  000A                     ltemp3	set	10


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            1      1       1
    BANK0            16     10      16
    BANK1            16      0       7

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_measurePw
    _main->_readNVM
    _main->_writeNVM
    _setRelay->_writeNVM
    _procSetupMode->_writeNVM
    _initDevice->_readNVM

Critical Paths under _main in BANK0

    _main->_procSetupMode
    _main->_setRelay
    _setRelay->_writeNVM
    _procSetupMode->_writeNVM
    _initDevice->_readNVM

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     954
                                              6 BANK0      4     4      0
                         _initDevice
                          _measurePw
                      _procSetupMode
                            _readNVM
                             _setLED
                           _setRelay
                           _writeNVM
 ---------------------------------------------------------------------------------
 (1) _setRelay                                             5     5      0     329
                                              1 BANK0      5     5      0
                           _writeNVM
 ---------------------------------------------------------------------------------
 (1) _setLED                                               5     5      0     118
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _procSetupMode                                        5     5      0     219
                                              1 BANK0      5     5      0
                           _writeNVM
 ---------------------------------------------------------------------------------
 (1) _writeNVM                                             2     1      1     195
                                              0 COMMON     1     0      1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _measurePw                                            1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (1) _initDevice                                           3     3      0      46
                                              2 BANK0      3     3      0
                            _readNVM
 ---------------------------------------------------------------------------------
 (1) _readNVM                                              3     1      2      22
                                              0 COMMON     1     1      0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initDevice
     _readNVM
   _measurePw
   _procSetupMode
     _writeNVM
   _readNVM
   _setLED
   _setRelay
     _writeNVM
   _writeNVM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            1      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               1      1       1       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            10      0       2       3       12.5%
BANK0               10      A      10       4      100.0%
BITBANK1            10      0       0       5        0.0%
BANK1               10      0       7       6       43.8%
ABS                  0      0      18       7        0.0%
DATA                 0      0      18       8        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Sep 16 18:18:07 2020

            __CFG_CP$OFF 0000                       fsr 0004          ??_procSetupMode 0011  
                    l102 01FF                      l108 00F5                      l127 03F1  
                    l810 01A3                      l802 0194                      l820 01BA  
                    l812 01AB                      l804 019C                      l900 0091  
                    l750 03D4                      l822 01C3                      l840 010A  
                    l832 00F3                      l760 0040                      l754 03DA  
                    l818 01B2                      l826 01C8                      l914 00C8  
                    l836 0100                      l780 016F                      l908 00AA  
                    l862 0156                      l854 0133                      l846 0111  
                    l766 004E                      l856 0141                      l792 0184  
                    l784 017A                      l866 0160                      l794 018C  
                    l786 017D                      l876 03ED                      l894 00CB  
                    l888 0088                      _RB0 0030                      _RB1 0031  
                    _RB2 0032                      _RB3 0033                      u520 016D  
                    u470 003E                      u800 03F8                      u720 0116  
                    u640 01C0                      u814 03FA                      u734 0118  
                    u680 00FE                      u755 011E                      u907 0071  
                    u860 00BD                      u870 00BE                      u775 014E  
                    u897 00A4                      fsr0 0004                      indf 0000  
           main@LowCount 0018                     _TMR0 0001                     _TRIS 0006  
          __CFG_CPDF$OFF 0000                     _main 0076                     btemp 0008  
                   start 0000                    ?_main 0007                    _EEADR 0026  
          __CFG_WDTE$OFF 0000                    _PORTB 0006                    _PwNow 001D  
        __end_of_readNVM 03D2                    ltemp0 0008                    ltemp1 000C  
                  ltemp3 000A                    ttemp0 0008                    ttemp1 000B  
                  status 0003                    wtemp0 0008                    wtemp1 000A  
                  wtemp2 000C                    wtemp3 000E               _NoSigState 00F0  
         __CFG_MCLRE$OFF 0000          __initialization 0002             __end_of_main 00EC  
             _ErrorState 00F2              readNVM@Addr 0007                   ??_main 0016  
                 _EEDATA 0025               _RelayState 00F8                   _OPTION 0000  
          _initDevice$89 0013                   _setLED 0165               _SetupState 00F1  
       __end_of_setRelay 0076                ??_readNVM 0007         __end_of_writeNVM 0037  
        __CFG_FOSC$INTRC 0000  __end_of__initialization 000F           __pcstackCOMMON 0007  
    setLED@LedCycleCount 0034             __pbitnvBANK0 00F8               __pbssBANK0 001A  
             __pbssBANK1 0030       __size_of_measurePw 000B               __pmaintext 0076  
        entry__measurePw 001A                  ?_setLED 0007    __end_of_procSetupMode 0165  
            _PwThreshold 0030                  _PwDiff2 001B                ?_setRelay 0007  
                _PwSaved 001C               _initDevice 03DD                _EECONbits 0021  
        __size_of_setLED 009B             entry__setLED 0014                ?_writeNVM 0007  
                __ptext1 0037                  __ptext2 0165                  __ptext3 00EC  
                __ptext4 0026                  __ptext5 03D2                  __ptext6 03DD  
                __ptext7 03C9        __end_of_measurePw 03DD                  _readNVM 03C9  
           writeNVM@Addr 0010             writeNVM@Data 0007     end_of_initialization 000F  
             ??_setRelay 0011               ??_writeNVM 0008              ?_initDevice 0007  
         __end_of_setLED 0200            __pbitbssBANK0 00F0      start_initialization 0002  
       __CFG_IOSCFS$4MHz 0000                _PortValue 0035                 ??_setLED 0007  
        _ErrorStateCount 0036         _procSetupMode$86 0014                ___latbits 0001  
          __pcstackBANK0 0010      __size_of_initDevice 0022         setRelay@RelayBit 0015  
       entry__initDevice 001C                __pjmp_tab 0012        __size_of_setRelay 003F  
         entry__setRelay 0012                 ?_readNVM 0010        __size_of_writeNVM 0011  
              _setLED$80 0011                _setLED$81 0012                _setLED$82 0013  
              _setLED$83 0014                _measurePw 03D2           entry__writeNVM 0018  
 __size_of_procSetupMode 0079               ?_measurePw 0007                 _PwMidpos 001A  
           ??_initDevice 0012            setLED@LedBeat 0033            setLED@LedMode 0010  
          _procSetupMode 00EC         __size_of_readNVM 0009            entry__readNVM 001E  
     __end_of_initDevice 03FF            __size_of_main 0076                 _setRelay 0037  
               _writeNVM 0026           ?_procSetupMode 0007              _setRelay$74 0013  
            ??_measurePw 0008    procSetupMode@Debounce 0032      entry__procSetupMode 0016  
